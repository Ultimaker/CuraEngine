name: Benchmark
on:
    push:
        paths:
            - 'include/**'
            - 'src/**'
            - 'cmake/**'
            - 'benchmark/**'
            - 'conanfile.py'
            - 'conandata.yml'
            - 'CMakeLists.txt'
            - '.github/workflows/benchmark.yml'
        branches:
            - benchmarking
            - main

env:
    CONAN_LOGIN_USERNAME_CURA: ${{ secrets.CONAN_USER }}
    CONAN_PASSWORD_CURA: ${{ secrets.CONAN_PASS }}
    CONAN_LOGIN_USERNAME_CURA_CE: ${{ secrets.CONAN_USER }}
    CONAN_PASSWORD_CURA_CE: ${{ secrets.CONAN_PASS }}
    CONAN_LOG_RUN_TO_OUTPUT: 1
    CONAN_LOGGING_LEVEL: info
    CONAN_NON_INTERACTIVE: 1

jobs:
    conan-recipe-version:
        uses: ultimaker/cura/.github/workflows/conan-recipe-version.yml@main
        with:
            project_name: curaengine

    benchmark:
        name: Run C++ benchmark
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout CuraEngine
                uses: actions/checkout@v3

            -   name: Setup Python and pip
                uses: actions/setup-python@v4
                with:
                    python-version: '3.10.x'
                    architecture: 'x64'
                    cache: 'pip'
                    cache-dependency-path: .github/workflows/requirements-conan-package.txt

            -   name: Cache Benchmark library
                uses: actions/cache@v1
                with:
                    path: benchmark
                    key: ${{ runner.os }}-googlebenchmark-v1.5.0

            -   name: Install Python requirements and Create default Conan profile
                run: |
                    pip install -r requirements-conan-package.txt
                working-directory: .github/workflows/

            -   name: Use Conan download cache (Bash)
                if: ${{ runner.os != 'Windows' }}
                run: conan config set storage.download_cache="$HOME/.conan/conan_download_cache"

            -   name: Cache Conan local repository packages (Bash)
                uses: actions/cache@v3
                if: ${{ runner.os != 'Windows' }}
                with:
                    path: |
                        $HOME/.conan/data
                        $HOME/.conan/conan_download_cache
                    key: conan-${{ runner.os }}-${{ runner.arch }}

            -   name: Install Linux system requirements
                if: ${{ runner.os == 'Linux' }}
                run: |
                    sudo apt update
                    sudo apt upgrade
                    sudo apt install build-essential checkinstall libegl-dev zlib1g-dev libssl-dev ninja-build autoconf libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev libxkbcommon-x11-dev pkg-config -y

            -   name: Use GCC-10 on ubuntu as default
                if: ${{ runner.os == 'Linux' }}
                run: |
                    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
                    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

            -   name: Get Conan configuration
                run: |
                    conan profile new default --detect
                    conan config install https://github.com/Ultimaker/conan-config.git

            -   name: Install dependencies
                run: conan install . ${{ needs.conan-recipe-version.outputs.recipe_id_full }} -o enable_testing=True -s build_type=Release --build=missing --update -g GitHubActionsRunEnv -g GitHubActionsBuildEnv

            -   name: Upload the Dependency package(s)
                run: conan upload "*" -r cura --all -c

            -   name: Set Environment variables from Conan install (bash)
                if: ${{ runner.os != 'Windows' }}
                run: |
                    . ./activate_github_actions_runenv.sh
                    . ./activate_github_actions_buildenv.sh
                working-directory: build/generators

            -   name: Build CuraEngine and tests
                run: |
                    cmake --preset release
                    cmake --build --preset release

            -   name: Run benchmark CuraEngine
                id: run-test
                run: ./benchmarks --benchmark_format=json | tee ../../../benchmark/benchmark_result.json
                working-directory: build/Release/benchmark

            -   name: Store benchmark result
                uses: benchmark-action/github-action-benchmark@v1
                with:
                    name: C++ Benchmark
                    tool: 'googlecpp'
                    output-file-path: benchmark/benchmark_result.json
                    github-token: ${{ secrets.GITHUB_TOKEN }}
                    auto-push: true
                    # Show alert with commit comment on detecting possible performance regression
                    alert-threshold: '200%'
                    comment-on-alert: true
                    fail-on-alert: true