name: Benchmark
on:
  push:
    paths:
      - 'include/**'
      - 'src/**'
      - 'benchmark/**'
      - '.github/workflows/benchmark.yml'
      - '.github/workflows/requirements-conan-package.txt'
    branches:
      - main
    tags:
      - '[0-9].[0-9].[0-9]*'
  pull_request:
    types: [ opened, reopened, synchronize ]
    paths:
      - 'include/**'
      - 'src/**'
      - 'benchmark/**'
      - '.github/workflows/benchmark.yml'
      - '.github/workflows/requirements-conan-package.txt'
    branches:
      - main
      - 'CURA-*'
      - '[0-9]+.[0-9]+'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write
  deployments: write

env:
  CONAN_LOGIN_USERNAME_CURA: ${{ secrets.CONAN_USER }}
  CONAN_PASSWORD_CURA: ${{ secrets.CONAN_PASS }}
  CONAN_LOGIN_USERNAME_CURA_CE: ${{ secrets.CONAN_USER }}
  CONAN_PASSWORD_CURA_CE: ${{ secrets.CONAN_PASS }}
  CONAN_LOG_RUN_TO_OUTPUT: 1
  CONAN_LOGGING_LEVEL: info
  CONAN_NON_INTERACTIVE: 1

jobs:
  check_actor:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.skip_check.outputs.proceed }}
    steps:
      - id: skip_check
        run: |
          if [[ "${{ github.actor }}" == *"[bot]"* ]]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request }}" == "" ]]; then 
            echo "proceed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.head.repo.fork }}" == "false" ]]; then 
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

  conan-recipe-version:
    needs: [ check_actor ]
    if: ${{ needs.check_actor.outputs.proceed == 'true' }}
    uses: ultimaker/cura/.github/workflows/conan-recipe-version.yml@main
    with:
      project_name: curaengine

  benchmark:
    needs: [ conan-recipe-version ]
    name: Run C++ benchmark
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout CuraEngine
        uses: actions/checkout@v3

      - name: Setup Python and pip
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.x'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: .github/workflows/requirements-conan-package.txt

      - name: Cache Benchmark library
        uses: actions/cache@v1
        with:
          path: ./cache
          key: ${{ runner.os }}-googlebenchmark-v1.5.0

      - name: Install Python requirements and Create default Conan profile
        run: |
          pip install -r .github/workflows/requirements-conan-package.txt

      # NOTE: Due to what are probably github issues, we have to remove the cache and reconfigure before the rest.
      #       This is maybe because grub caches the disk it uses last time, which is recreated each time.
      - name: Install Linux system requirements
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo rm /var/cache/debconf/config.dat
          sudo dpkg --configure -a
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt upgrade
          sudo apt install build-essential checkinstall libegl-dev zlib1g-dev libssl-dev ninja-build autoconf libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev libxkbcommon-x11-dev pkg-config -y

      - name: Install GCC-132 on ubuntu
        run: |
          sudo apt install g++-13 gcc-13 -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 13

      - name: Create the default Conan profile
        run: conan profile new default --detect

      - name: Get Conan configuration
        run: |
          conan config install https://github.com/Ultimaker/conan-config.git
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/${{ runner.os }}/${{ runner.arch }}"

      - name: Use Conan download cache (Bash)
        if: ${{ runner.os != 'Windows' }}
        run: conan config set storage.download_cache="$HOME/.conan/conan_download_cache"

      - name: Cache Conan local repository packages (Bash)
        uses: actions/cache@v3
        if: ${{ runner.os != 'Windows' }}
        with:
          path: |
            $HOME/.conan/data
            $HOME/.conan/conan_download_cache
          key: conan-${{ runner.os }}-${{ runner.arch }}

      - name: Install dependencies
        run: conan install . ${{ needs.conan-recipe-version.outputs.recipe_id_full }} -o enable_benchmarks=True -s build_type=Release --build=missing --update -g GitHubActionsRunEnv -g GitHubActionsBuildEnv

      - name: Upload the Dependency package(s)
        run: conan upload "*" -r cura --all -c

      - name: Set Environment variables from Conan install (bash)
        if: ${{ runner.os != 'Windows' }}
        run: |
          . ./activate_github_actions_runenv.sh
          . ./activate_github_actions_buildenv.sh
        working-directory: build/Release/generators

      - name: Build CuraEngine and tests
        run: |
          cmake --preset release
          cmake --build --preset release

      - name: Run benchmark CuraEngine
        id: run-test
        run: ./benchmarks --benchmark_format=json --benchmark_out=benchmark_result.json
        working-directory: build/Release/benchmark

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: C++ Benchmark
          output-file-path: build/Release/benchmark/benchmark_result.json
          gh-repository: github.com/Ultimaker/CuraEngineBenchmarks
          gh-pages-branch: main
          benchmark-data-dir-path: dev/bench
          tool: 'googlecpp'
          github-token: ${{ secrets.CURA_BENCHMARK_PAT }}
          auto-push: true
          #          alert-threshold: '175%'
          #          summary-always: true
          #          comment-on-alert: true
          max-items-in-chart: 250
