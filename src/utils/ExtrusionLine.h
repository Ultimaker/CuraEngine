//Copyright (c) 2020 Ultimaker B.V.
//CuraEngine is released under the terms of the AGPLv3 or higher.


#ifndef UTILS_EXTRUSION_LINE_H
#define UTILS_EXTRUSION_LINE_H

#include "ExtrusionJunction.h"

namespace cura
{

/*!
 * Represents a polyline (not just a line) that is to be extruded with variable
 * line width.
 *
 * This polyline is a sequence of \ref ExtrusionJunction, with a bit of metadata
 * about which inset it represents.
 */
struct ExtrusionLine
{
    /*!
     * Which inset this path represents, counted from the outside inwards.
     *
     * The outer wall has index 0.
     */
    size_t inset_idx;

    /*!
     * If a thin piece needs to be printed with an odd number of walls (e.g. 5
     * walls) then there will be one wall in the middle that is not a loop. This
     * field indicates whether this path is such a line through the middle, that
     * has no companion line going back on the other side and is not a closed
     * loop.
     */
    bool is_odd;

    /*!
     * The list of vertices along which this path runs.
     *
     * Each junction has a width, making this path a variable-width path.
     */
    std::list<ExtrusionJunction> junctions;

    ExtrusionLine(const size_t inset_idx, const bool is_odd)
    : inset_idx(inset_idx)
    , is_odd(is_odd)
    {}

    /*!
     * Sum the total length of this path.
     */
    coord_t getLength() const;

    /*!
     * Export the included junctions as vector.
     */
    void appendJunctionsTo(std::vector<ExtrusionJunction>& result) const;
};

using WallToolPaths = std::vector<std::list<ExtrusionLine>>; //<! The wall toolpaths generated by libArachne
} // namespace cura
#endif // UTILS_EXTRUSION_LINE_H
